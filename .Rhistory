suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(ggpubr))
suppressPackageStartupMessages(library(RColorBrewer))
suppressPackageStartupMessages(library(ggsci))
suppressPackageStartupMessages(library(writexl))
suppressPackageStartupMessages(library(reshape2))
Capitalize <- function(x) {
paste0(toupper(substring(x, 1, 1)), substring(x, 2))
}
out_dic <- "~/Documents/一妇婴/卵巢癌研究/结果/analysis_1/"
dir.create(out_dic, recursive = T, showWarnings = F)
dir.create(fs::path(out_dic, "clinical"))
include_samp<-read.table("/Users/shishuo/Documents/一妇婴/卵巢癌研究/结果/sample_id.10X.new")[,2]
samp_info <- read_xlsx("~/Documents/一妇婴/卵巢癌研究/数据/单细胞转录组/样本信息/All.sample_info.S264.xlsx", sheet=1)
samp_info <- samp_info %>% select(-Sort, -Sample_id_raw) %>% unique()
samp_info <- samp_info %>% filter(Sample_id %in% include_samp) %>% arrange(GSE_id, Sample_id)
samp_info$Tissue_new<-samp_info$Tissue
samp_info$Tissue_new[samp_info$Tissue_new %in% c("ovary","fallopian tube","ovary/fallopian","tumor")]<-"ovary/fallopian tube"
samp_info$Tissue_new[!(samp_info$Tissue_new %in% c("ovary/fallopian tube","omentum","peritoneum"))]<-"others"
samp_info$Stage_v1 <- samp_info$Stage %>% gsub("a|b|c","",.) %>% ifelse(.=="I" | .=="II", "I/II", .)
#add patient id
samp_info$aa <- paste(samp_info$GSE_id, samp_info$Patient_id_raw)
rm1<-samp_info$aa %>% unique()
rm2<-data.frame(aa=rm1, Patient_id=paste0("Pat", 1:length(rm1)))
samp_info <- samp_info %>% select(-Patient_id) %>% left_join(rm2, by="aa") %>% select(-aa)
scRNA_meta <- read.table("/Users/shishuo/Documents/一妇婴/卵巢癌研究/结果/All.meta.txt", head=T, sep=" ")
remove_proj<-c("GSE180661","GSE232314","GSE276563")
sample_in<-samp_info %>% filter(!(GSE_id %in% remove_proj)) %>% pull(Sample_id)
cell_num <- scRNA_meta %>% filter(major_cell_type!="epithelial.cells") %>% filter(orig.ident %in% sample_in) %>% mutate(Final_annotation=paste0(gsub("[.].*", "", major_cell_type), "-", gsub("-.*","",Final_annotation))) %>%
select(orig.ident, Final_annotation) %>% table() %>% as.data.frame()
print(length(unique(cell_num$orig.ident)))
cell_num$Final_annotation<-Capitalize(cell_num$Final_annotation)
cell_num %>% group_by(orig.ident) %>% mutate(perc=Freq/sum(Freq)) %>% filter(grepl("Lymphoid", Final_annotation)) %>% mutate(sum_perc=sum(perc)) %>% arrange(desc(sum_perc))
cell_num %>% group_by(orig.ident) %>% mutate(perc=Freq/sum(Freq)) %>% filter(grepl("Lymphoid", Final_annotation)) %>% mutate(sum_perc=sum(perc)) %>% arrange(desc(sum_perc)) %>% .$orig.ident
cell_num %>% group_by(orig.ident) %>% mutate(perc=Freq/sum(Freq)) %>% filter(grepl("Lymphoid", Final_annotation)) %>% mutate(sum_perc=sum(perc)) %>% arrange(desc(sum_perc)) %>% .$orig.ident %>% unique()
cell_num %>% group_by(orig.ident) %>% mutate(perc=Freq/sum(Freq)) %>% filter(grepl("Lymphoid", Final_annotation)) %>% mutate(sum_perc=sum(perc)) %>% arrange(desc(sum_perc)) %>% select(orig.ident, sum_perc)
cell_num %>% group_by(orig.ident) %>% mutate(perc=Freq/sum(Freq)) %>% filter(grepl("Lymphoid", Final_annotation)) %>% mutate(sum_perc=sum(perc)) %>% arrange(desc(sum_perc)) %>% select(orig.ident, sum_perc) %>% unique()
cell_num %>% group_by(orig.ident) %>% mutate(perc=Freq/sum(Freq)) %>% filter(grepl("Lymphoid", Final_annotation)) %>% mutate(sum_perc=sum(perc)) %>% arrange(desc(sum_perc)) %>% select(orig.ident, sum_perc) %>% unique() %>% range(sum_perc)
x<-cell_num %>% group_by(orig.ident) %>% mutate(perc=Freq/sum(Freq)) %>% filter(grepl("Lymphoid", Final_annotation)) %>% mutate(sum_perc=sum(perc)) %>% arrange(desc(sum_perc)) %>% select(orig.ident, sum_perc) %>% unique() %>% pull(sum_perc)
x
diff(x)
diff(rev(x))
diffs<-diff(rev(x))
mean(abs(diffs))*100
mean(abs(diffs))*100 %>% round(.,1)
round(mean(abs(diffs))*100,1)
range(x)
range(round(x,1))
range(round(x,2))
range(round(x,3)*100)
gene<-read.table(marker, head=T)
marker<-"~/Documents/一妇婴/卵巢癌研究/结果/cell_senescence/cellType_diffAgeGene/cellTypeSpecAgeGene.csv"
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(readxl))
suppressPackageStartupMessages(library(writexl))
suppressPackageStartupMessages(library(survival))
suppressPackageStartupMessages(library(survminer))
suppressPackageStartupMessages(library(tibble))
suppressPackageStartupMessages(library(broom))
gene<-read.table(marker, head=T)
head(gene)
gene<-read.csv(marker)
head(gene)
surv_time<-"OS"
surv_event<-paste0(surv_time, ".status")
cancer_type<-"TCGA-OV"
out_dic<-"./"
gene<-read.csv(marker) %>% filter(cell_type=="epithelial.cells ")
clinical <- read_xlsx("~/Documents/一妇婴/卵巢癌研究/数据/TCGA/clinical.xlsx")
clinical <- clinical %>% rename(OS.status=OS, OS=OS.time,
DSS.status=DSS, DSS=DSS.time,
DFI.status=DFI, DFI=DFI.time,
PFI.status=PFI, PFI=PFI.time
)
tpm<-read.csv(paste0("~/Documents/一妇婴/TCGA_database/",cancer_type,"/TCGAbiolinks_tpm.csv") , row.names = 1)
samp_info<-read.table(paste0("~/Documents/一妇婴/TCGA_database/",cancer_type,"/TCGAbiolinks_sample.info.tsv"),sep="\t",head=T)
#remove normal sample
normal_barcode<-samp_info %>% filter(shortLetterCode=="NT") %>% pull(barcode)
tpm<-tpm %>% select(-gsub("-",".",normal_barcode))
#读入epi细胞的衰老指标
##tpm矩阵去重并按照患者名命名
new_name<-sapply(colnames(tpm), function(x) {
parts <- unlist(strsplit(x, "\\."))   # 按 . 分隔
paste(parts[1:min(3, length(parts))], collapse = "-")   # 取前三个元素，用 - 连接
}) %>% as.vector()
if(any(duplicated(new_name))){
tpm<-tpm[-which(duplicated(new_name))]
new_name<-new_name[-which(duplicated(new_name))]
}
colnames(tpm)<-new_name
clinical<-data.frame(bcr_patient_barcode=colnames(tpm)) %>% left_join(clinical)
modules <- split(gene$gene, gene$Senescence.Effect)
require(GSVA)
tpm<-tpm[rowSums(tpm)>0,]
tpm<-t(scale(t(tpm))) %>% as.data.frame()
gsvaPar <- gsvaParam(as.matrix(tpm), modules, maxDiff = T, kcdf = "Gaussian")
modules
modules <- split(gene$gene, gene$Senescence.Effect)
modules
head(gene)
gene<-read.csv(marker) %>% filter(cell_type=="epithelial.cells ")
head(gene)
gene<-read.csv(marker) %>% filter(cell_type=="epithelial.cells")
modules <- split(gene$gene, gene$Senescence.Effect)
View(tpm)
surv_time<-"OS"
surv_event<-paste0(surv_time, ".status")
cancer_type<-"TCGA-OV"
out_dic<-"./"
marker<-"~/Documents/一妇婴/卵巢癌研究/结果/cell_senescence/cellType_diffAgeGene/cellTypeSpecAgeGene.csv"
#gene_n<-5
#surv_time<-"OS"
#surv_event<-"OS.status"
#out_dic<-"~/Documents/一妇婴/卵巢癌研究/结果/TCGA/OS"
#cluster marker gene
gene<-read.csv(marker) %>% filter(cell_type=="epithelial.cells")
#load clinical and tpm data
clinical <- read_xlsx("~/Documents/一妇婴/卵巢癌研究/数据/TCGA/clinical.xlsx")
clinical <- clinical %>% rename(OS.status=OS, OS=OS.time,
DSS.status=DSS, DSS=DSS.time,
DFI.status=DFI, DFI=DFI.time,
PFI.status=PFI, PFI=PFI.time
)
tpm<-read.csv(paste0("~/Documents/一妇婴/TCGA_database/",cancer_type,"/TCGAbiolinks_tpm.csv") , row.names = 1)
samp_info<-read.table(paste0("~/Documents/一妇婴/TCGA_database/",cancer_type,"/TCGAbiolinks_sample.info.tsv"),sep="\t",head=T)
#remove normal sample
normal_barcode<-samp_info %>% filter(shortLetterCode=="NT") %>% pull(barcode)
tpm<-tpm %>% select(-gsub("-",".",normal_barcode))
#读入epi细胞的衰老指标
##tpm矩阵去重并按照患者名命名
new_name<-sapply(colnames(tpm), function(x) {
parts <- unlist(strsplit(x, "\\."))   # 按 . 分隔
paste(parts[1:min(3, length(parts))], collapse = "-")   # 取前三个元素，用 - 连接
}) %>% as.vector()
if(any(duplicated(new_name))){
tpm<-tpm[-which(duplicated(new_name))]
new_name<-new_name[-which(duplicated(new_name))]
}
colnames(tpm)<-new_name
clinical<-data.frame(bcr_patient_barcode=colnames(tpm)) %>% left_join(clinical)
#normlize
tpm<-tpm[rowSums(tpm)>0,]
tpm<-t(scale(t(tpm))) %>% as.data.frame()
suppressPackageStartupMessages(library(GSVA))
modules <- split(gene$gene, gene$Senescence.Effect)
gsvaPar <- gsvaParam(as.matrix(tpm), modules, maxDiff = T, kcdf = "Gaussian")
#注意matrixStats要用1.1.0版本的
expr_geneset <- gsva(gsvaPar)
gsva_res<-as.data.frame(expr_geneset)
gsva_res[1:10,1:10]
as.data.frame(t(gsva_res)) %>% rownames_to_column(var="bcr_patient_barcode") %>% head()
module_scores_cli<-as.data.frame(t(gsva_res)) %>% rownames_to_column(var="bcr_patient_barcode") %>%
mutate(epi_cs=Induces-Inhibits) %>% left_join(clinical)
module<-"epi_cs"
module_scores_cli$y<-module_scores_cli[[module]]
require(survival)
require(survminer)
library(ggplot2)
surv_obj <- Surv(module_scores_cli[[surv_time]], module_scores_cli[[surv_event]])
# 使用 ggsurvplot 绘制生存曲线
ggsurv <- ggsurvplot(
survfit(surv_obj ~ module_scores_cli[[paste0(module, "_group")]]),
data = module_scores_cli,
palette = c("#d7191c","#4d4d4d"),
pval = TRUE, # 显示 p 值
title = paste("Survival Analysis for", module, "in", cancer_type),
legend.title = module,
legend.lab =  sort(unique(module_scores_cli[[paste0(module, "_group")]])),
risk.table = TRUE # 显示风险表
)+xlab("Time(days)") + ylab(surv_time)
module_scores_cli[[paste0(module, "_group")]] <- ifelse(module_scores_cli[[module]] <= median(module_scores_cli[[module]]), "Low", "High")
# 创建生存对象
surv_obj <- Surv(module_scores_cli[[surv_time]], module_scores_cli[[surv_event]])
# 使用 ggsurvplot 绘制生存曲线
ggsurv <- ggsurvplot(
survfit(surv_obj ~ module_scores_cli[[paste0(module, "_group")]]),
data = module_scores_cli,
palette = c("#d7191c","#4d4d4d"),
pval = TRUE, # 显示 p 值
title = paste("Survival Analysis for", module, "in", cancer_type),
legend.title = module,
legend.lab =  sort(unique(module_scores_cli[[paste0(module, "_group")]])),
risk.table = TRUE # 显示风险表
)+xlab("Time(days)") + ylab(surv_time)
ggsurv
model <- coxph(Surv(module_scores_cli[[surv_time]], module_scores_cli[[surv_event]]) ~ module_scores_cli[["y"]])
ggforest(model)
ggforest(model)
tidy(model, exponentiate = TRUE, conf.int = TRUE)
head(module_scores_cli)
module<-"Induces"
module_scores_cli$y<-module_scores_cli[[module]]
coxph(Surv(module_scores_cli[[surv_time]], module_scores_cli[[surv_event]]) ~ module_scores_cli[["y"]])
model <- coxph(Surv(module_scores_cli[[surv_time]], module_scores_cli[[surv_event]]) ~ module_scores_cli[["y"]])
tidy(model, exponentiate = TRUE, conf.int = TRUE)
module_scores_cli[[paste0(module, "_group")]] <- ifelse(module_scores_cli[[module]] <= median(module_scores_cli[[module]]), "Low", "High")
surv_obj <- Surv(module_scores_cli[[surv_time]], module_scores_cli[[surv_event]])
# 使用 ggsurvplot 绘制生存曲线
ggsurv <- ggsurvplot(
survfit(surv_obj ~ module_scores_cli[[paste0(module, "_group")]]),
data = module_scores_cli,
palette = c("#d7191c","#4d4d4d"),
pval = TRUE, # 显示 p 值
title = paste("Survival Analysis for", module, "in", cancer_type),
legend.title = module,
legend.lab =  sort(unique(module_scores_cli[[paste0(module, "_group")]])),
risk.table = TRUE # 显示风险表
)+xlab("Time(days)") + ylab(surv_time)
ggsurvplot(
survfit(surv_obj ~ module_scores_cli[[paste0(module, "_group")]]),
data = module_scores_cli,
palette = c("#d7191c","#4d4d4d"),
pval = TRUE, # 显示 p 值
title = paste("Survival Analysis for", module, "in", cancer_type),
legend.title = module,
legend.lab =  sort(unique(module_scores_cli[[paste0(module, "_group")]])),
risk.table = TRUE # 显示风险表
)+xlab("Time(days)") + ylab(surv_time)
module<-"Inhibits"
module_scores_cli[[paste0(module, "_group")]] <- ifelse(module_scores_cli[[module]] <= median(module_scores_cli[[module]]), "Low", "High")
# 创建生存对象
surv_obj <- Surv(module_scores_cli[[surv_time]], module_scores_cli[[surv_event]])
# 使用 ggsurvplot 绘制生存曲线
ggsurv <- ggsurvplot(
survfit(surv_obj ~ module_scores_cli[[paste0(module, "_group")]]),
data = module_scores_cli,
palette = c("#d7191c","#4d4d4d"),
pval = TRUE, # 显示 p 值
title = paste("Survival Analysis for", module, "in", cancer_type),
legend.title = module,
legend.lab =  sort(unique(module_scores_cli[[paste0(module, "_group")]])),
risk.table = TRUE # 显示风险表
)+xlab("Time(days)") + ylab(surv_time)
ggsurv
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(readxl))
suppressPackageStartupMessages(library(writexl))
suppressPackageStartupMessages(library(survival))
suppressPackageStartupMessages(library(survminer))
suppressPackageStartupMessages(library(tibble))
gene<-read.table("~/Documents/一妇婴/卵巢癌研究/结果/malignant/TCGA/cellSubtype_markGene/selfLH_allCancer/TCGA-OV/OS/geneN5/geneN5.txt", head=T)
gene %>% head()
gene<-gene %>% select(cluster, gene) %>% rename("OV.subtype"="cluster")
head(gene)
saveRDS(gene, "~/Documents/一妇婴/卵巢癌研究/结果/model/reference//OV.subtype.markers.rds")
rm(list=ls())
setwd("~/Documents/一妇婴/卵巢癌研究/结果/model")
gene<-readRDS("reference/OV.subtype.markers.rds")
head(gene)
cancer_type="TCGA-OV"
clinical <- read_xlsx("~/Documents/一妇婴/卵巢癌研究/数据/TCGA/clinical.xlsx")
clinical <- clinical %>% rename(OS.status=OS, OS=OS.time,
DSS.status=DSS, DSS=DSS.time,
DFI.status=DFI, DFI=DFI.time,
PFI.status=PFI, PFI=PFI.time
)
tpm<-read.csv(paste0("~/Documents/一妇婴/TCGA_database/",cancer_type,"/TCGAbiolinks_tpm.csv") , row.names = 1)
samp_info<-read.table(paste0("~/Documents/一妇婴/TCGA_database/",cancer_type,"/TCGAbiolinks_sample.info.tsv"),sep="\t",head=T)
#remove normal sample
normal_barcode<-samp_info %>% filter(shortLetterCode=="NT") %>% pull(barcode)
tpm<-tpm %>% select(-gsub("-",".",normal_barcode))
#读入epi细胞的衰老指标
##tpm矩阵去重并按照患者名命名
new_name<-sapply(colnames(tpm), function(x) {
parts <- unlist(strsplit(x, "\\."))   # 按 . 分隔
paste(parts[1:min(3, length(parts))], collapse = "-")   # 取前三个元素，用 - 连接
}) %>% as.vector()
if(any(duplicated(new_name))){
tpm<-tpm[-which(duplicated(new_name))]
new_name<-new_name[-which(duplicated(new_name))]
}
colnames(tpm)<-new_name
clinical<-data.frame(bcr_patient_barcode=colnames(tpm)) %>% left_join(clinical)
tpm_dat<-tpm
gene<-readRDS("reference/OV.subtype.markers.rds")
modules <- split(gene$gene, gene$OV.subtype)
for(i in 1:length(modules)){
modules[[i]]<-c(modules[[i]], c("EPCAM","KRT5","CDH1"))
}
tpm_dat<-tpm_dat[rowSums(tpm_dat)>0,]
tpm_dat<-t(scale(t(tpm_dat)))
###GSVA
gsvaPar <- gsvaParam(tpm_dat, modules, maxDiff = T, kcdf = "Gaussian")
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(tibble))
suppressPackageStartupMessages(library(GSVA))
gsvaPar <- gsvaParam(tpm_dat, modules, maxDiff = T, kcdf = "Gaussian")
gsva_res <- gsva(gsvaPar)
gsva_res<-as.data.frame(gsva_res)
head(gsva_res)
gsva_res<-as.data.frame(t(as.data.frame(gsva_res)))
old<-read.csv("~/Documents/一妇婴/卵巢癌研究/结果/malignant/TCGA/cellSubtype_markGene/selfLH_allCancer/TCGA-OV/OS/geneN5/km_group.csv")
head(old)
all(old$OV_KLF6==gsva_res$OV_KLF6)
data.frame(old$OV_KLF6,gsva_res$OV_KLF6) %>% head()
data.frame(V1=old$OV_KLF6,V2=gsva_res$OV_KLF6) %>% mutate(V3=V1-V2) %>% pull(V3) %>% table()
data.frame(V1=old$OV_KLF6,V2=gsva_res$OV_KLF6) %>% mutate(V3=V1-V2)
data.frame(V1=round(old$OV_KLF6,4),V2=round(gsva_res$OV_KLF6,4)) %>% mutate(V3=V1-V2)
data.frame(V1=round(old$OV_KLF6,4),V2=round(gsva_res$OV_KLF6,4)) %>% mutate(V3=V1-V2)  %>% pull(V3) %>% table()
round(old$OV_KLF6,4) %>% unique() %>% length()
dim(tpm_dat)
gsvaPar <- gsvaParam(tpm_dat[,1:2], modules, maxDiff = T, kcdf = "Gaussian")
gsva_res <- gsva(gsvaPar)
gsva_res<-as.data.frame(t(as.data.frame(gsva_res)))
gsva_res
old[1:2,]
gsvaPar <- gsvaParam(tpm_dat[,1], modules, maxDiff = T, kcdf = "Gaussian")
clinical <- read_xlsx("~/Documents/一妇婴/卵巢癌研究/数据/TCGA/clinical.xlsx")
clinical <- clinical %>% rename(OS.status=OS, OS=OS.time,
DSS.status=DSS, DSS=DSS.time,
DFI.status=DFI, DFI=DFI.time,
PFI.status=PFI, PFI=PFI.time
)
rc<-read.csv(paste0("~/Documents/一妇婴/TCGA_database/",cancer_type,"/TCGAbiolinks_counts.csv") , row.names = 1)
samp_info<-read.table(paste0("~/Documents/一妇婴/TCGA_database/",cancer_type,"/TCGAbiolinks_sample.info.tsv"),sep="\t",head=T)
#remove normal sample
normal_barcode<-samp_info %>% filter(shortLetterCode=="NT") %>% pull(barcode)
rc<-rc %>% select(-gsub("-",".",normal_barcode))
##rc矩阵去重并按照患者名命名
new_name<-sapply(colnames(rc), function(x) {
parts <- unlist(strsplit(x, "\\."))   # 按 . 分隔
paste(parts[1:min(3, length(parts))], collapse = "-")   # 取前三个元素，用 - 连接
}) %>% as.vector()
if(any(duplicated(new_name))){
rc<-rc[-which(duplicated(new_name))]
new_name<-new_name[-which(duplicated(new_name))]
}
colnames(rc)<-new_name
clinical<-data.frame(bcr_patient_barcode=colnames(rc)) %>% left_join(clinical)
gene<-readRDS("reference/OV.subtype.markers.rds")
for(i in unique(gene$OV.subtype)){
gene<-rbind(gene, data.frame(OV.subtype=i, gene=c("EPCAM","KRT5","CDH1")))
}
gene
counts_dat<-rc
counts_dat<-counts_dat[intersect(gene$gene, rownames(counts_dat)),]
counts_dat<-counts_dat[rowSums(counts_dat > 0) > 0,]
counts_dat<-apply(counts_dat, 2, function(x){x/sum(x)})
View(counts_dat)
OV.subtype_v<-sort(unique(gene$OV.subtype))
cc<-OV.subtype_v[1]
cc
gene %>% filter((OV.subtype==cc) & (gene %in% rownames(counts_dat))) %>% pull(gene)
our_res<-NULL
OV.subtype_v<-sort(unique(gene$OV.subtype))
for(cc in OV.subtype_v){
gg<-gene %>% filter((OV.subtype==cc) & (gene %in% rownames(counts_dat))) %>% pull(gene)
our_res<-rbind(our_res, apply(counts_dat[gg,], 2, mean))
}
rownames(our_res)<-OV.subtype_v
our_res
OV.subtype<-apply(our_res, 1, function(x){ifelse(x<=median(x), "Low" , "High")})
OV.subtype
all(old$bcr_patient_barcode==rownames(OV.subtype))
table(old$OV_KLF6_group, OV.subtype$)
OV.subtype<-apply(our_res, 1, function(x){ifelse(x<=median(x), "Low" , "High")}) %>% as.data.frame()
OV.subtype
all(old$bcr_patient_barcode==rownames(OV.subtype))
table(old$OV_KLF6_group, OV.subtype$OV_KLF6)
our_res
hist(our_res["OV-KLF6",])
hist(t(our_res["OV_KLF6",])
hist(our_res["OV_KLF6",])
hist(old[,"OV_KLF6"])
plot(old[,"OV_KLF6"], our_res["OV_KLF6",])
median(old[,"OV_KLF6"])
table(old$OV_SNHG29_group, OV.subtype$OV_SNHG29)
table(old$OV_NPAS3_group, OV.subtype$OV_NPAS3)
OV.subtype
module_scores_cli<-as.data.frame(OV.subtype)%>% rownames_to_column(var="bcr_patient_barcode") %>% left_join(clinical) %>%
select(bcr_patient_barcode, contains("OV_"), contains(surv_time), contains(surv_event))
surv_time<-"OS"
surv_event<-"OS.status"
module_scores_cli<-as.data.frame(OV.subtype)%>% rownames_to_column(var="bcr_patient_barcode") %>% left_join(clinical) %>%
select(bcr_patient_barcode, contains("OV_"), contains(surv_time), contains(surv_event))
names(modules)
for (module in names(modules)) { # 遍历 Module1 到 Module4
require(survival)
require(survminer)
library(ggplot2)
module_scores_cli$y<-module_scores_cli[[module]]
#model <- coxph(Surv(module_scores_cli[[surv_time]], module_scores_cli[[surv_event]]) ~ module_scores_cli[["y"]])
#tidy_results <- tidy(model, exponentiate = TRUE, conf.int = TRUE)
#write.csv(tidy_results, fs::path(out_dic, paste0(module, "_cox_results.csv")), row.names = FALSE)
#fig1<-ggforest(model)
#pdf(fs::path(out_dic, paste0(module, "_cox.single.pdf")), width = 10, height = 8)
#print(fig1)
#dev.off()
module_scores_cli[[paste0(module, "_group")]] <- ifelse(module_scores_cli[[module]] <= median(module_scores_cli[[module]]), "Low", "High")
# 创建生存对象
surv_obj <- Surv(module_scores_cli[[surv_time]], module_scores_cli[[surv_event]])
# 使用 ggsurvplot 绘制生存曲线
ggsurv <- ggsurvplot(
survfit(surv_obj ~ module_scores_cli[[paste0(module, "_group")]]),
data = module_scores_cli,
palette = c("#d7191c","#4d4d4d"),
pval = TRUE, # 显示 p 值
title = paste("Survival Analysis for", module, "in", cancer_type),
legend.title = module,
legend.lab =  sort(unique(module_scores_cli[[paste0(module, "_group")]])),
risk.table = TRUE # 显示风险表
)+xlab("Time(days)") + ylab(surv_time)
print(ggsurv, newpage = F) # 打印图表
}
module_scores_cli
for (module in names(modules)) { # 遍历 Module1 到 Module4
require(survival)
require(survminer)
library(ggplot2)
module_scores_cli$y<-module_scores_cli[[module]]
#model <- coxph(Surv(module_scores_cli[[surv_time]], module_scores_cli[[surv_event]]) ~ module_scores_cli[["y"]])
#tidy_results <- tidy(model, exponentiate = TRUE, conf.int = TRUE)
#write.csv(tidy_results, fs::path(out_dic, paste0(module, "_cox_results.csv")), row.names = FALSE)
#fig1<-ggforest(model)
#pdf(fs::path(out_dic, paste0(module, "_cox.single.pdf")), width = 10, height = 8)
#print(fig1)
#dev.off()
module_scores_cli[[paste0(module, "_group")]] <- module_scores_cli[[module]]
# 创建生存对象
surv_obj <- Surv(module_scores_cli[[surv_time]], module_scores_cli[[surv_event]])
# 使用 ggsurvplot 绘制生存曲线
ggsurv <- ggsurvplot(
survfit(surv_obj ~ module_scores_cli[[paste0(module, "_group")]]),
data = module_scores_cli,
palette = c("#d7191c","#4d4d4d"),
pval = TRUE, # 显示 p 值
title = paste("Survival Analysis for", module, "in", cancer_type),
legend.title = module,
legend.lab =  sort(unique(module_scores_cli[[paste0(module, "_group")]])),
risk.table = TRUE # 显示风险表
)+xlab("Time(days)") + ylab(surv_time)
print(ggsurv, newpage = F) # 打印图表
}
for (module in names(modules)) { # 遍历 Module1 到 Module4
require(survival)
require(survminer)
library(ggplot2)
module_scores_cli$y<-module_scores_cli[[module]]
#model <- coxph(Surv(module_scores_cli[[surv_time]], module_scores_cli[[surv_event]]) ~ module_scores_cli[["y"]])
#tidy_results <- tidy(model, exponentiate = TRUE, conf.int = TRUE)
#write.csv(tidy_results, fs::path(out_dic, paste0(module, "_cox_results.csv")), row.names = FALSE)
#fig1<-ggforest(model)
#pdf(fs::path(out_dic, paste0(module, "_cox.single.pdf")), width = 10, height = 8)
#print(fig1)
#dev.off()
module_scores_cli[[paste0(module, "_group")]] <- module_scores_cli[[module]]
# 创建生存对象
surv_obj <- Surv(module_scores_cli[[surv_time]], module_scores_cli[[surv_event]])
# 使用 ggsurvplot 绘制生存曲线
ggsurv <- ggsurvplot(
survfit(surv_obj ~ module_scores_cli[[paste0(module, "_group")]]),
data = module_scores_cli,
palette = c("#d7191c","#4d4d4d"),
pval = TRUE, # 显示 p 值
title = paste("Survival Analysis for", module, "in", cancer_type),
legend.title = module,
legend.lab =  sort(unique(module_scores_cli[[paste0(module, "_group")]])),
risk.table = TRUE # 显示风险表
)+xlab("Time(days)") + ylab(surv_time)
pdf(paste0(module,".pdf"))
print(ggsurv, newpage = F) # 打印图表
dev.off()
}
View(counts_dat)
counts_dat<-rc
counts_dat<-counts_dat[intersect(gene$gene, rownames(counts_dat)),]
counts_dat<-counts_dat[rowSums(counts_dat > 0) > 0,]
counts_dat<-apply(counts_dat, 2, function(x){x/sum(x)})
counts_dat<-t(scale(t(counts_dat)))
our_res<-NULL
OV.subtype_v<-sort(unique(gene$OV.subtype))
for(cc in OV.subtype_v){
gg<-gene %>% filter((OV.subtype==cc) & (gene %in% rownames(counts_dat))) %>% pull(gene)
our_res<-rbind(our_res, apply(counts_dat[gg,], 2, mean))
}
rownames(our_res)<-OV.subtype_v
OV.subtype<-apply(our_res, 1, function(x){ifelse(x<=median(x), "Low" , "High")}) %>% as.data.frame()
table(old$OV_KLF6_group, OV.subtype$OV_KLF6)
table(old$OV_SNHG29_group, OV.subtype$OV_SNHG29)
table(old$OV_NPAS3_group, OV.subtype$OV_NPAS3)
module_scores_cli<-as.data.frame(OV.subtype)%>% rownames_to_column(var="bcr_patient_barcode") %>% left_join(clinical) %>%
select(bcr_patient_barcode, contains("OV_"), contains(surv_time), contains(surv_event))
for (module in names(modules)) { # 遍历 Module1 到 Module4
require(survival)
require(survminer)
library(ggplot2)
module_scores_cli$y<-module_scores_cli[[module]]
#model <- coxph(Surv(module_scores_cli[[surv_time]], module_scores_cli[[surv_event]]) ~ module_scores_cli[["y"]])
#tidy_results <- tidy(model, exponentiate = TRUE, conf.int = TRUE)
#write.csv(tidy_results, fs::path(out_dic, paste0(module, "_cox_results.csv")), row.names = FALSE)
#fig1<-ggforest(model)
#pdf(fs::path(out_dic, paste0(module, "_cox.single.pdf")), width = 10, height = 8)
#print(fig1)
#dev.off()
module_scores_cli[[paste0(module, "_group")]] <- module_scores_cli[[module]]
# 创建生存对象
surv_obj <- Surv(module_scores_cli[[surv_time]], module_scores_cli[[surv_event]])
# 使用 ggsurvplot 绘制生存曲线
ggsurv <- ggsurvplot(
survfit(surv_obj ~ module_scores_cli[[paste0(module, "_group")]]),
data = module_scores_cli,
palette = c("#d7191c","#4d4d4d"),
pval = TRUE, # 显示 p 值
title = paste("Survival Analysis for", module, "in", cancer_type),
legend.title = module,
legend.lab =  sort(unique(module_scores_cli[[paste0(module, "_group")]])),
risk.table = TRUE # 显示风险表
)+xlab("Time(days)") + ylab(surv_time)
pdf(paste0(module,".pdf"))
print(ggsurv, newpage = F) # 打印图表
dev.off()
}
